# Generated from MyLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,230,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,4,0,73,8,0,11,0,12,0,74,1,1,4,1,78,8,
        1,11,1,12,1,79,1,1,1,1,4,1,84,8,1,11,1,12,1,85,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,3,2,97,8,2,1,3,1,3,5,3,101,8,3,10,3,12,3,104,9,
        3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,132,8,5,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,163,8,11,
        10,11,12,11,166,9,11,1,11,1,11,1,12,4,12,171,8,12,11,12,12,12,172,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,
        1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,5,34,
        226,8,34,10,34,12,34,229,9,34,1,102,0,35,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,5,1,0,48,57,2,0,10,
        10,13,13,3,0,9,10,13,13,32,32,2,0,65,90,97,122,3,0,48,57,65,90,97,
        122,241,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,1,72,1,0,0,0,3,77,1,0,0,0,5,96,1,0,0,0,7,98,1,0,0,0,9,107,1,
        0,0,0,11,131,1,0,0,0,13,133,1,0,0,0,15,136,1,0,0,0,17,141,1,0,0,
        0,19,147,1,0,0,0,21,152,1,0,0,0,23,158,1,0,0,0,25,170,1,0,0,0,27,
        176,1,0,0,0,29,178,1,0,0,0,31,180,1,0,0,0,33,182,1,0,0,0,35,184,
        1,0,0,0,37,186,1,0,0,0,39,188,1,0,0,0,41,190,1,0,0,0,43,193,1,0,
        0,0,45,196,1,0,0,0,47,198,1,0,0,0,49,201,1,0,0,0,51,204,1,0,0,0,
        53,206,1,0,0,0,55,208,1,0,0,0,57,210,1,0,0,0,59,212,1,0,0,0,61,214,
        1,0,0,0,63,216,1,0,0,0,65,218,1,0,0,0,67,220,1,0,0,0,69,223,1,0,
        0,0,71,73,7,0,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,
        1,0,0,0,75,2,1,0,0,0,76,78,7,0,0,0,77,76,1,0,0,0,78,79,1,0,0,0,79,
        77,1,0,0,0,79,80,1,0,0,0,80,81,1,0,0,0,81,83,5,46,0,0,82,84,7,0,
        0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,4,
        1,0,0,0,87,88,5,116,0,0,88,89,5,114,0,0,89,90,5,117,0,0,90,97,5,
        101,0,0,91,92,5,102,0,0,92,93,5,97,0,0,93,94,5,108,0,0,94,95,5,115,
        0,0,95,97,5,101,0,0,96,87,1,0,0,0,96,91,1,0,0,0,97,6,1,0,0,0,98,
        102,5,34,0,0,99,101,9,0,0,0,100,99,1,0,0,0,101,104,1,0,0,0,102,103,
        1,0,0,0,102,100,1,0,0,0,103,105,1,0,0,0,104,102,1,0,0,0,105,106,
        5,34,0,0,106,8,1,0,0,0,107,108,3,7,3,0,108,10,1,0,0,0,109,110,5,
        105,0,0,110,111,5,110,0,0,111,132,5,116,0,0,112,113,5,102,0,0,113,
        114,5,108,0,0,114,115,5,111,0,0,115,116,5,97,0,0,116,132,5,116,0,
        0,117,118,5,98,0,0,118,119,5,111,0,0,119,120,5,111,0,0,120,132,5,
        108,0,0,121,122,5,115,0,0,122,123,5,116,0,0,123,124,5,114,0,0,124,
        125,5,105,0,0,125,126,5,110,0,0,126,132,5,103,0,0,127,128,5,70,0,
        0,128,129,5,73,0,0,129,130,5,76,0,0,130,132,5,69,0,0,131,109,1,0,
        0,0,131,112,1,0,0,0,131,117,1,0,0,0,131,121,1,0,0,0,131,127,1,0,
        0,0,132,12,1,0,0,0,133,134,5,105,0,0,134,135,5,102,0,0,135,14,1,
        0,0,0,136,137,5,101,0,0,137,138,5,108,0,0,138,139,5,115,0,0,139,
        140,5,101,0,0,140,16,1,0,0,0,141,142,5,119,0,0,142,143,5,104,0,0,
        143,144,5,105,0,0,144,145,5,108,0,0,145,146,5,101,0,0,146,18,1,0,
        0,0,147,148,5,114,0,0,148,149,5,101,0,0,149,150,5,97,0,0,150,151,
        5,100,0,0,151,20,1,0,0,0,152,153,5,119,0,0,153,154,5,114,0,0,154,
        155,5,105,0,0,155,156,5,116,0,0,156,157,5,101,0,0,157,22,1,0,0,0,
        158,159,5,47,0,0,159,160,5,47,0,0,160,164,1,0,0,0,161,163,8,1,0,
        0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,
        0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,6,11,0,0,168,24,1,0,0,
        0,169,171,7,2,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,
        0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,6,12,0,0,175,26,1,0,0,
        0,176,177,5,61,0,0,177,28,1,0,0,0,178,179,5,43,0,0,179,30,1,0,0,
        0,180,181,5,45,0,0,181,32,1,0,0,0,182,183,5,42,0,0,183,34,1,0,0,
        0,184,185,5,47,0,0,185,36,1,0,0,0,186,187,5,37,0,0,187,38,1,0,0,
        0,188,189,5,46,0,0,189,40,1,0,0,0,190,191,5,38,0,0,191,192,5,38,
        0,0,192,42,1,0,0,0,193,194,5,124,0,0,194,195,5,124,0,0,195,44,1,
        0,0,0,196,197,5,33,0,0,197,46,1,0,0,0,198,199,5,61,0,0,199,200,5,
        61,0,0,200,48,1,0,0,0,201,202,5,33,0,0,202,203,5,61,0,0,203,50,1,
        0,0,0,204,205,5,60,0,0,205,52,1,0,0,0,206,207,5,62,0,0,207,54,1,
        0,0,0,208,209,5,59,0,0,209,56,1,0,0,0,210,211,5,44,0,0,211,58,1,
        0,0,0,212,213,5,40,0,0,213,60,1,0,0,0,214,215,5,41,0,0,215,62,1,
        0,0,0,216,217,5,123,0,0,217,64,1,0,0,0,218,219,5,125,0,0,219,66,
        1,0,0,0,220,221,5,60,0,0,221,222,5,60,0,0,222,68,1,0,0,0,223,227,
        7,3,0,0,224,226,7,4,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,
        1,0,0,0,227,228,1,0,0,0,228,70,1,0,0,0,229,227,1,0,0,0,10,0,74,79,
        85,96,102,131,164,172,227,1,6,0,0
    ]

class MyLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT = 1
    FLOAT = 2
    BOOL = 3
    STRING = 4
    FILE = 5
    TYPE = 6
    IF = 7
    ELSE = 8
    WHILE = 9
    READ = 10
    WRITE = 11
    COMMENT = 12
    WS = 13
    ASSIGN = 14
    PLUS = 15
    MINUS = 16
    MUL = 17
    DIV = 18
    MOD = 19
    DOT = 20
    AND = 21
    OR = 22
    NOT = 23
    EQ = 24
    NEQ = 25
    LT = 26
    GT = 27
    SEMI = 28
    COMMA = 29
    LPAREN = 30
    RPAREN = 31
    LBRACE = 32
    RBRACE = 33
    BITLEFT = 34
    ID = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'read'", "'write'", "'='", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'.'", "'&&'", "'||'", "'!'", "'=='", 
            "'!='", "'<'", "'>'", "';'", "','", "'('", "')'", "'{'", "'}'", 
            "'<<'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "BOOL", "STRING", "FILE", "TYPE", "IF", "ELSE", 
            "WHILE", "READ", "WRITE", "COMMENT", "WS", "ASSIGN", "PLUS", 
            "MINUS", "MUL", "DIV", "MOD", "DOT", "AND", "OR", "NOT", "EQ", 
            "NEQ", "LT", "GT", "SEMI", "COMMA", "LPAREN", "RPAREN", "LBRACE", 
            "RBRACE", "BITLEFT", "ID" ]

    ruleNames = [ "INT", "FLOAT", "BOOL", "STRING", "FILE", "TYPE", "IF", 
                  "ELSE", "WHILE", "READ", "WRITE", "COMMENT", "WS", "ASSIGN", 
                  "PLUS", "MINUS", "MUL", "DIV", "MOD", "DOT", "AND", "OR", 
                  "NOT", "EQ", "NEQ", "LT", "GT", "SEMI", "COMMA", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "BITLEFT", "ID" ]

    grammarFileName = "MyLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


