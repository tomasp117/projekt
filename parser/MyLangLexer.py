# Generated from MyLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,217,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,4,0,69,8,0,11,0,12,0,70,1,1,4,1,74,8,1,11,1,12,1,75,1,1,1,
        1,4,1,80,8,1,11,1,12,1,81,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,93,8,2,1,3,1,3,5,3,97,8,3,10,3,12,3,100,9,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
        4,122,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        5,10,153,8,10,10,10,12,10,156,9,10,1,10,1,10,1,11,4,11,161,8,11,
        11,11,12,11,162,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,
        1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
        1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,5,32,
        213,8,32,10,32,12,32,216,9,32,1,98,0,33,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,1,0,5,1,0,48,57,2,0,10,10,13,13,3,0,9,
        10,13,13,32,32,2,0,65,90,97,122,3,0,48,57,65,90,97,122,227,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,1,68,1,0,0,0,3,73,1,0,0,0,5,92,1,0,0,
        0,7,94,1,0,0,0,9,121,1,0,0,0,11,123,1,0,0,0,13,126,1,0,0,0,15,131,
        1,0,0,0,17,137,1,0,0,0,19,142,1,0,0,0,21,148,1,0,0,0,23,160,1,0,
        0,0,25,166,1,0,0,0,27,168,1,0,0,0,29,170,1,0,0,0,31,172,1,0,0,0,
        33,174,1,0,0,0,35,176,1,0,0,0,37,178,1,0,0,0,39,180,1,0,0,0,41,183,
        1,0,0,0,43,186,1,0,0,0,45,188,1,0,0,0,47,191,1,0,0,0,49,194,1,0,
        0,0,51,196,1,0,0,0,53,198,1,0,0,0,55,200,1,0,0,0,57,202,1,0,0,0,
        59,204,1,0,0,0,61,206,1,0,0,0,63,208,1,0,0,0,65,210,1,0,0,0,67,69,
        7,0,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,
        71,2,1,0,0,0,72,74,7,0,0,0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,
        0,0,75,76,1,0,0,0,76,77,1,0,0,0,77,79,5,46,0,0,78,80,7,0,0,0,79,
        78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,4,1,0,0,
        0,83,84,5,116,0,0,84,85,5,114,0,0,85,86,5,117,0,0,86,93,5,101,0,
        0,87,88,5,102,0,0,88,89,5,97,0,0,89,90,5,108,0,0,90,91,5,115,0,0,
        91,93,5,101,0,0,92,83,1,0,0,0,92,87,1,0,0,0,93,6,1,0,0,0,94,98,5,
        34,0,0,95,97,9,0,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,99,1,0,0,0,
        98,96,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,102,5,34,0,0,102,
        8,1,0,0,0,103,104,5,105,0,0,104,105,5,110,0,0,105,122,5,116,0,0,
        106,107,5,102,0,0,107,108,5,108,0,0,108,109,5,111,0,0,109,110,5,
        97,0,0,110,122,5,116,0,0,111,112,5,98,0,0,112,113,5,111,0,0,113,
        114,5,111,0,0,114,122,5,108,0,0,115,116,5,115,0,0,116,117,5,116,
        0,0,117,118,5,114,0,0,118,119,5,105,0,0,119,120,5,110,0,0,120,122,
        5,103,0,0,121,103,1,0,0,0,121,106,1,0,0,0,121,111,1,0,0,0,121,115,
        1,0,0,0,122,10,1,0,0,0,123,124,5,105,0,0,124,125,5,102,0,0,125,12,
        1,0,0,0,126,127,5,101,0,0,127,128,5,108,0,0,128,129,5,115,0,0,129,
        130,5,101,0,0,130,14,1,0,0,0,131,132,5,119,0,0,132,133,5,104,0,0,
        133,134,5,105,0,0,134,135,5,108,0,0,135,136,5,101,0,0,136,16,1,0,
        0,0,137,138,5,114,0,0,138,139,5,101,0,0,139,140,5,97,0,0,140,141,
        5,100,0,0,141,18,1,0,0,0,142,143,5,119,0,0,143,144,5,114,0,0,144,
        145,5,105,0,0,145,146,5,116,0,0,146,147,5,101,0,0,147,20,1,0,0,0,
        148,149,5,47,0,0,149,150,5,47,0,0,150,154,1,0,0,0,151,153,8,1,0,
        0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,
        0,155,157,1,0,0,0,156,154,1,0,0,0,157,158,6,10,0,0,158,22,1,0,0,
        0,159,161,7,2,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,
        0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,6,11,0,0,165,24,1,0,0,
        0,166,167,5,61,0,0,167,26,1,0,0,0,168,169,5,43,0,0,169,28,1,0,0,
        0,170,171,5,45,0,0,171,30,1,0,0,0,172,173,5,42,0,0,173,32,1,0,0,
        0,174,175,5,47,0,0,175,34,1,0,0,0,176,177,5,37,0,0,177,36,1,0,0,
        0,178,179,5,46,0,0,179,38,1,0,0,0,180,181,5,38,0,0,181,182,5,38,
        0,0,182,40,1,0,0,0,183,184,5,124,0,0,184,185,5,124,0,0,185,42,1,
        0,0,0,186,187,5,33,0,0,187,44,1,0,0,0,188,189,5,61,0,0,189,190,5,
        61,0,0,190,46,1,0,0,0,191,192,5,33,0,0,192,193,5,61,0,0,193,48,1,
        0,0,0,194,195,5,60,0,0,195,50,1,0,0,0,196,197,5,62,0,0,197,52,1,
        0,0,0,198,199,5,59,0,0,199,54,1,0,0,0,200,201,5,44,0,0,201,56,1,
        0,0,0,202,203,5,40,0,0,203,58,1,0,0,0,204,205,5,41,0,0,205,60,1,
        0,0,0,206,207,5,123,0,0,207,62,1,0,0,0,208,209,5,125,0,0,209,64,
        1,0,0,0,210,214,7,3,0,0,211,213,7,4,0,0,212,211,1,0,0,0,213,216,
        1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,66,1,0,0,0,216,214,1,
        0,0,0,10,0,70,75,81,92,98,121,154,162,214,1,6,0,0
    ]

class MyLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT = 1
    FLOAT = 2
    BOOL = 3
    STRING = 4
    TYPE = 5
    IF = 6
    ELSE = 7
    WHILE = 8
    READ = 9
    WRITE = 10
    COMMENT = 11
    WS = 12
    ASSIGN = 13
    PLUS = 14
    MINUS = 15
    MUL = 16
    DIV = 17
    MOD = 18
    DOT = 19
    AND = 20
    OR = 21
    NOT = 22
    EQ = 23
    NEQ = 24
    LT = 25
    GT = 26
    SEMI = 27
    COMMA = 28
    LPAREN = 29
    RPAREN = 30
    LBRACE = 31
    RBRACE = 32
    ID = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'read'", "'write'", "'='", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'.'", "'&&'", "'||'", "'!'", "'=='", 
            "'!='", "'<'", "'>'", "';'", "','", "'('", "')'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "BOOL", "STRING", "TYPE", "IF", "ELSE", "WHILE", 
            "READ", "WRITE", "COMMENT", "WS", "ASSIGN", "PLUS", "MINUS", 
            "MUL", "DIV", "MOD", "DOT", "AND", "OR", "NOT", "EQ", "NEQ", 
            "LT", "GT", "SEMI", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "ID" ]

    ruleNames = [ "INT", "FLOAT", "BOOL", "STRING", "TYPE", "IF", "ELSE", 
                  "WHILE", "READ", "WRITE", "COMMENT", "WS", "ASSIGN", "PLUS", 
                  "MINUS", "MUL", "DIV", "MOD", "DOT", "AND", "OR", "NOT", 
                  "EQ", "NEQ", "LT", "GT", "SEMI", "COMMA", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "ID" ]

    grammarFileName = "MyLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


