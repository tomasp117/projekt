# Generated from PLC.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,223,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,4,0,71,8,0,11,0,12,0,72,1,1,4,1,76,8,1,11,1,12,
        1,77,1,1,1,1,4,1,82,8,1,11,1,12,1,83,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,95,8,2,1,3,1,3,5,3,99,8,3,10,3,12,3,102,9,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,3,4,124,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,159,8,11,10,11,12,11,162,9,
        11,1,11,1,11,1,12,4,12,167,8,12,11,12,12,12,168,1,12,1,12,1,13,1,
        13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
        20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
        31,1,31,1,32,1,32,1,33,1,33,5,33,219,8,33,10,33,12,33,222,9,33,1,
        100,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,1,0,5,1,0,48,57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,2,0,65,90,
        97,122,3,0,48,57,65,90,97,122,233,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,1,70,1,0,0,0,3,75,1,0,0,0,5,94,1,0,0,0,7,96,1,0,
        0,0,9,123,1,0,0,0,11,125,1,0,0,0,13,128,1,0,0,0,15,133,1,0,0,0,17,
        139,1,0,0,0,19,143,1,0,0,0,21,148,1,0,0,0,23,154,1,0,0,0,25,166,
        1,0,0,0,27,172,1,0,0,0,29,174,1,0,0,0,31,176,1,0,0,0,33,178,1,0,
        0,0,35,180,1,0,0,0,37,182,1,0,0,0,39,184,1,0,0,0,41,186,1,0,0,0,
        43,189,1,0,0,0,45,192,1,0,0,0,47,194,1,0,0,0,49,197,1,0,0,0,51,200,
        1,0,0,0,53,202,1,0,0,0,55,204,1,0,0,0,57,206,1,0,0,0,59,208,1,0,
        0,0,61,210,1,0,0,0,63,212,1,0,0,0,65,214,1,0,0,0,67,216,1,0,0,0,
        69,71,7,0,0,0,70,69,1,0,0,0,71,72,1,0,0,0,72,70,1,0,0,0,72,73,1,
        0,0,0,73,2,1,0,0,0,74,76,7,0,0,0,75,74,1,0,0,0,76,77,1,0,0,0,77,
        75,1,0,0,0,77,78,1,0,0,0,78,79,1,0,0,0,79,81,5,46,0,0,80,82,7,0,
        0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,4,
        1,0,0,0,85,86,5,116,0,0,86,87,5,114,0,0,87,88,5,117,0,0,88,95,5,
        101,0,0,89,90,5,102,0,0,90,91,5,97,0,0,91,92,5,108,0,0,92,93,5,115,
        0,0,93,95,5,101,0,0,94,85,1,0,0,0,94,89,1,0,0,0,95,6,1,0,0,0,96,
        100,5,34,0,0,97,99,9,0,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,101,
        1,0,0,0,100,98,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,104,5,
        34,0,0,104,8,1,0,0,0,105,106,5,105,0,0,106,107,5,110,0,0,107,124,
        5,116,0,0,108,109,5,102,0,0,109,110,5,108,0,0,110,111,5,111,0,0,
        111,112,5,97,0,0,112,124,5,116,0,0,113,114,5,98,0,0,114,115,5,111,
        0,0,115,116,5,111,0,0,116,124,5,108,0,0,117,118,5,115,0,0,118,119,
        5,116,0,0,119,120,5,114,0,0,120,121,5,105,0,0,121,122,5,110,0,0,
        122,124,5,103,0,0,123,105,1,0,0,0,123,108,1,0,0,0,123,113,1,0,0,
        0,123,117,1,0,0,0,124,10,1,0,0,0,125,126,5,105,0,0,126,127,5,102,
        0,0,127,12,1,0,0,0,128,129,5,101,0,0,129,130,5,108,0,0,130,131,5,
        115,0,0,131,132,5,101,0,0,132,14,1,0,0,0,133,134,5,119,0,0,134,135,
        5,104,0,0,135,136,5,105,0,0,136,137,5,108,0,0,137,138,5,101,0,0,
        138,16,1,0,0,0,139,140,5,102,0,0,140,141,5,111,0,0,141,142,5,114,
        0,0,142,18,1,0,0,0,143,144,5,114,0,0,144,145,5,101,0,0,145,146,5,
        97,0,0,146,147,5,100,0,0,147,20,1,0,0,0,148,149,5,119,0,0,149,150,
        5,114,0,0,150,151,5,105,0,0,151,152,5,116,0,0,152,153,5,101,0,0,
        153,22,1,0,0,0,154,155,5,47,0,0,155,156,5,47,0,0,156,160,1,0,0,0,
        157,159,8,1,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,
        160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,163,164,6,11,0,0,
        164,24,1,0,0,0,165,167,7,2,0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,
        166,1,0,0,0,168,169,1,0,0,0,169,170,1,0,0,0,170,171,6,12,0,0,171,
        26,1,0,0,0,172,173,5,61,0,0,173,28,1,0,0,0,174,175,5,43,0,0,175,
        30,1,0,0,0,176,177,5,45,0,0,177,32,1,0,0,0,178,179,5,42,0,0,179,
        34,1,0,0,0,180,181,5,47,0,0,181,36,1,0,0,0,182,183,5,37,0,0,183,
        38,1,0,0,0,184,185,5,46,0,0,185,40,1,0,0,0,186,187,5,38,0,0,187,
        188,5,38,0,0,188,42,1,0,0,0,189,190,5,124,0,0,190,191,5,124,0,0,
        191,44,1,0,0,0,192,193,5,33,0,0,193,46,1,0,0,0,194,195,5,61,0,0,
        195,196,5,61,0,0,196,48,1,0,0,0,197,198,5,33,0,0,198,199,5,61,0,
        0,199,50,1,0,0,0,200,201,5,60,0,0,201,52,1,0,0,0,202,203,5,62,0,
        0,203,54,1,0,0,0,204,205,5,59,0,0,205,56,1,0,0,0,206,207,5,44,0,
        0,207,58,1,0,0,0,208,209,5,40,0,0,209,60,1,0,0,0,210,211,5,41,0,
        0,211,62,1,0,0,0,212,213,5,123,0,0,213,64,1,0,0,0,214,215,5,125,
        0,0,215,66,1,0,0,0,216,220,7,3,0,0,217,219,7,4,0,0,218,217,1,0,0,
        0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,68,1,0,0,0,
        222,220,1,0,0,0,10,0,72,77,83,94,100,123,160,168,220,1,6,0,0
    ]

class PLCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT = 1
    FLOAT = 2
    BOOL = 3
    STRING = 4
    TYPE = 5
    IF = 6
    ELSE = 7
    WHILE = 8
    FOR = 9
    READ = 10
    WRITE = 11
    COMMENT = 12
    WS = 13
    ASSIGN = 14
    PLUS = 15
    MINUS = 16
    MUL = 17
    DIV = 18
    MOD = 19
    DOT = 20
    AND = 21
    OR = 22
    NOT = 23
    EQ = 24
    NEQ = 25
    LT = 26
    GT = 27
    SEMI = 28
    COMMA = 29
    LPAREN = 30
    RPAREN = 31
    LBRACE = 32
    RBRACE = 33
    ID = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'for'", "'read'", "'write'", "'='", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'.'", "'&&'", "'||'", "'!'", 
            "'=='", "'!='", "'<'", "'>'", "';'", "','", "'('", "')'", "'{'", 
            "'}'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "BOOL", "STRING", "TYPE", "IF", "ELSE", "WHILE", 
            "FOR", "READ", "WRITE", "COMMENT", "WS", "ASSIGN", "PLUS", "MINUS", 
            "MUL", "DIV", "MOD", "DOT", "AND", "OR", "NOT", "EQ", "NEQ", 
            "LT", "GT", "SEMI", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "ID" ]

    ruleNames = [ "INT", "FLOAT", "BOOL", "STRING", "TYPE", "IF", "ELSE", 
                  "WHILE", "FOR", "READ", "WRITE", "COMMENT", "WS", "ASSIGN", 
                  "PLUS", "MINUS", "MUL", "DIV", "MOD", "DOT", "AND", "OR", 
                  "NOT", "EQ", "NEQ", "LT", "GT", "SEMI", "COMMA", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "ID" ]

    grammarFileName = "PLC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


